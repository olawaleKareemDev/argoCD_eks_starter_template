version: 2.1

orbs:
  docker: circleci/docker@2.1.1
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.0

jobs:

  build-and-push:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout

      - setup_remote_docker:
          version: default
          docker_layer_caching: true

      - run:
          name: Install AWS CLI
          command: |
            sudo apt update
            sudo apt install -y awscli

      - run:
          name: Authenticate Docker with ECR
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin  $ECR_REGISTRY
            # aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 908027386559.dkr.ecr.us-east-1.amazonaws.com
      - run:
          name: Build and tag Docker image
          command: |
            IMAGE_TAG=latest 
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$CIRCLE_SHA1

      - run:
          name: Push Docker image to ECR
          command: |
            IMAGE_TAG=latest 
            docker image ls
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CIRCLE_SHA1

  bump-docker-tag-kustomize:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Install kustomize
          command: |
            URL=https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v4.5.2/kustomize_v4.5.2_linux_amd64.tar.gz
            curl -L $URL | tar zx
            [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo
            $SUDO chmod +x ./kustomize
            $SUDO mv ./kustomize /usr/local/bin
      - checkout
      - run:
          name: Bump Docker Tag
          command: |
            cd manifests
            kustomize edit set image $APP_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$CIRCLE_SHA1
      - add_ssh_keys:
          fingerprints:
            - "$SSH_FINGERPRINT"
      - run:
          name: Commit & Push to GitHub
          command: |
            git config user.email "$GITHUB_EMAIL"
            git config user.name "CircleCI User"
            git checkout $CIRCLE_BRANCH           
            git add .
            git commit -am "Bumps docker tag: $CIRCLE_SHA1"
            git push origin $CIRCLE_BRANCH

  argocd-configure:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          Name of the EKS cluster region
        type: string
    steps:
      - checkout
      - run:
          name: Pull Updated code from repo
          command: |
            git pull origin $CIRCLE_BRANCH
            # aws eks update-kubeconfig --region <region> --name <cluster-name>
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.aws-region >>

      - kubernetes/create-or-update-resource:
          resource-file-path: argocd/config.yaml

  argocd-manual-sync:
    docker:
      - image: cimg/base:stable
    parameters:
      server:
        description: |
          Server IP of of ArgoCD
        type: string
      username:
        description: |
          Username for ArgoCD
        type: string
      password:
        description: |
          Password for ArgoCD
        type: string
    steps:
      - run:
          name: Install ArgoCD CLI
          command: |
            URL=https://<< parameters.server >>/download/argocd-linux-amd64
            [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo
            $SUDO curl --insecure -sSL -o /usr/local/bin/argocd $URL
            $SUDO chmod +x /usr/local/bin/argocd
      - run:
          name: ArgoCD CLI login
          command: argocd login << parameters.server >> --insecure --username << parameters.username >> --password << parameters.password >>
      - run:
          name: Manual sync
          command: argocd app sync $APP_NAME
      - run:
          name: Wait for application to reach a synced and healthy state
          command: argocd app wait $APP_NAME



workflows:
  Deploy-App-on-EKS:
    jobs:
      - build-and-push:
          context:
            - aws-context-retrunbuild
            - node-app-context
      - bump-docker-tag-kustomize:
          requires:
            - build-and-push
      - argocd-configure:
          cluster-name: $CLUSTER_NAME
          aws-region: $AWS_REGION
          requires:
            - bump-docker-tag-kustomize
          context:
            - aws-context-retrunbuild
            - node-app-context
      ### Paste the following only when you opt for the ArgoCD manual-sync-policy:
      - argocd-manual-sync:
          server: $ARGOCD_SERVER
          username: $ARGOCD_USERNAME
          password: $ARGOCD_PASSWORD
          requires:
            - argocd-configure
          context:
            - node-app-context


